seed: 42
output_dir: './output/' # path to save checkpoint/strategy
load_checkpoint: '/path/to/Qwen-32b-base-model/' # can set in run_command --load_checkpoint
load_ckpt_format: 'safetensors'
src_strategy_path_or_dir: ''
auto_trans_ckpt: True  # If true, auto transform load_checkpoint to load in distributed model
only_save_strategy: False
resume_training: False
run_mode: 'finetune'

# trainer config
trainer:
  type: CausalLanguageModelingTrainer
  model_name: 'qwen2_32b'

# if True, do evaluate during the training process. if false, do nothing.
# note that the task trainer should support _evaluate_in_training function.
do_eval: False
eval_step_interval: -1        # num of step intervals between each eval, -1 means no step end eval.
eval_epoch_interval: 50        # num of epoch intervals between each eval, 1 means eval on every epoch end.

# runner config
runner_config:
  epochs: 4
  batch_size: 1
  sink_mode: True
  sink_size: 1

# wrapper cell config
runner_wrapper:
  type: MFTrainOneStepCell
  use_clip_grad: True

# optimizer
optimizer:
  type: AdamW
  betas: [0.9, 0.95]
  eps: 1.e-8
  learning_rate: 1.e-5
  weight_decay: 0.0

# lr schedule
lr_schedule:
  type: CosineWithWarmUpLR
  learning_rate: 6.e-5
  lr_end: 1.e-7
  warmup_ratio: 0.05
  total_steps: -1 # -1 means it will load the total steps of the dataset

train_dataset: &train_dataset

  data_loader:
    type: CommonDataLoader

    # offline
    path: "/path/to/packed_data"
    load_func: 'load_from_disk'
    
    shuffle: True
    packing: pack
    adaptor_config:
      compress_mask: True
    mock_config:
      seq_length: 32768
      eod_pad_length: 128 # for packing, it means the maximum number of samples per packed sample
      size: 25909 # total_data_size / data_parallel

  input_columns: ["input_ids", "labels", "loss_mask", "position_ids", "attention_mask"]
  construct_args_key:  ["input_ids", "labels", "loss_mask", "position_ids", "actual_seq_len"]

  num_parallel_workers: 8
  python_multiprocessing: True
  drop_remainder: True
  numa_enable: False
  prefetch_size: 1
train_dataset_task:
  type: CausalLanguageModelDataset
  dataset_config: *train_dataset

# eval dataset
eval_dataset: &eval_dataset
  data_loader:
    type: MindDataset
    dataset_dir: ""
    shuffle: False
  input_columns: ["input_ids", "target_ids", "attention_mask"]
  num_parallel_workers: 8
  python_multiprocessing: False
  drop_remainder: False
  repeat: 1
  numa_enable: False
  prefetch_size: 1
eval_dataset_task:
  type: CausalLanguageModelDataset
  dataset_config: *eval_dataset

# default parallel of device num = 8 for Atlas 800T A2
parallel_config:
  data_parallel: &dp 8
  model_parallel: 8
  pipeline_stage: 2
  use_seq_parallel: True
  optimizer_shard: True  # optimizer_shard == enable_parallel_optimizer
  micro_batch_num: 16
  vocab_emb_dp: False
  gradient_aggregation_group: 8
# The size of micro_batch must be greater than or equal to stage_num(pipeline_stage).
# when model parallel is greater than 1, we can set micro_batch_interleave_num=2, that may accelerate the train process.
micro_batch_interleave_num: 1

use_parallel: True
# parallel context config
parallel:
  parallel_mode: 1 # 0-data parallel, 1-semi-auto parallel, 2-auto parallel, 3-hybrid parallel
  gradients_mean: False
  enable_alltoall: False
  full_batch: False 
  dataset_strategy: [[*dp, 1], [*dp, 1], [*dp, 1], [*dp, 1], [*dp, 1]] # add, =dp
  search_mode: "sharding_propagation"
  enable_parallel_optimizer: True
  strategy_ckpt_save_file: "./ckpt_strategy.ckpt"
  parallel_optimizer_config:
    gradient_accumulation_shard: False
    parallel_optimizer_threshold: 64

# recompute config
recompute_config:
  recompute: [23,18]
  select_recompute: ['feed_forward\.mul', 'feed_forward\.activate\.silu', 'feed_forward\.reshape', 'feed_forward\.w2\.reshape']
  parallel_optimizer_comm_recompute: False
  mp_comm_recompute: False
  recompute_slice_activation: False

# callbacks
callbacks:
  - type: MFLossMonitor
  - type: CheckpointMonitor
    prefix: "qwen2"
    save_checkpoint_steps: 100
    keep_checkpoint_max: 10
    checkpoint_format: "safetensors"
    integrated_save: False
    async_save: False

# mindspore context init config
context:
  graph_kernel_flags: "--enable_cluster_ops=MatMul --online_tuning=1"
  jit_config:
    jit_level: "O0"
  memory_optimize_level: "O0"
  mode: 0 #0--Graph Mode; 1--Pynative Mode
  device_target: "Ascend"
  max_call_depth: 10000
  max_device_memory: "58GB"
  save_graphs: False
  save_graphs_path: "./graph"
  device_id: 0
  ascend_config:
    precision_mode: "must_keep_origin_dtype"
    parallel_speed_up_json_path: "/path/to/parallel_speed_up.json" # parallel speed up configuration file

# model config
model:
  model_config:
    input_sliced_sig: True
    use_eod_attn_mask_compression: True
    type: LlamaConfig
    batch_size: 1
    seq_length: 32768
    hidden_size: 5120
    num_layers: 64
    num_heads: 40
    n_kv_heads: 8
    vocab_size: 152064
    intermediate_size: 27648
    qkv_has_bias: True
    rms_norm_eps: 1.0e-5
    theta: 1000000.0
    max_position_embedding: 131072
    emb_dropout_prob: 0.0
    eos_token_id: 151643
    pad_token_id: 151643
    compute_dtype: "bfloat16"
    layernorm_compute_type: "float32"
    softmax_compute_type: "float32"
    rotary_dtype: "float32"
    param_init_type: "float32"
    use_flash_attention: True
    use_past: False
    fine_grain_interleave: 1
    offset: 0
    checkpoint_name_or_path: ""
    repetition_penalty: 1
    max_decode_length: 2048
    top_k: 0
    top_p: 0.8
    do_sample: False
    compute_in_2d: True
    is_dynamic: False
    qkv_concat: False
    # configuration items copied from Qwen
    rotary_pct: 1.0
    rotary_emb_base: 1000000
    kv_channels: 128
    fused_rms_norm: True

  arch:
    type: LlamaForCausalLM

processor:
  return_tensors: ms
  tokenizer:
    model_max_length: 131072
    vocab_file: "/path/to/vocab.json" # can set in run_command --vocab_file
    merges_file: "/path/to/merges.txt" # can set in run_command --merges_file
    unk_token: "<|endoftext|>"
    eos_token: "<|endoftext|>"
    pad_token: "<|endoftext|>"
    type: Qwen2Tokenizer
  type: Qwen2Processor
